#include <bits/stdc++.h>

using namespace std;

void input(vector < int > & nums, int n) {
  for (int index = 0; index < n; index++) {
    int element;
    cin >> element;
    nums[index] = element;
  }
}

void print(vector < int > & nums, int n) {
  for (int index = 0; index < n; index++) cout << nums[index] << " ";
  cout << endl;
}

// Time Complexity is O(N) and Space Complexity is O(N).
void mergeVectors(vector < int > & nums, int start, int mid, int end) {
  vector < int > temp;
  int i = start, j = mid + 1;
  while (i <= mid && j <= end) {
    if (nums[i] < nums[j]) temp.push_back(nums[i++]);
    else temp.push_back(nums[j++]);
  }
  while (i <= mid) temp.push_back(nums[i++]);
  while (j <= end) temp.push_back(nums[j++]);

  // Coping `temp` elements to `nums` elements.
  for (int k = start; k <= end; k++) {
    nums[k] = temp[k - start];
  }
}

// Time Complexity is O(N*logN) and Space Complexity is O(1).
void mergeSort(vector < int > & nums, int start, int end) {
  // Base Case.
  if (start >= end) return;

  // Find mid.
  int mid = start + (end - start) / 2;

  // Call for left half.
  mergeSort(nums, 0, mid);

  // Call for right half.
  mergeSort(nums, mid + 1, end);

  // Merging two vectors.
  mergeVectors(nums, start, mid, end);
}

int main() {
  int size;
  cin >> size;
  vector < int > nums(size, 0);
  input(nums, size);
  print(nums, size);
  
  // Overall: Time Complexity is O(N*logN) and Space Complexity is O(N).
  mergeSort(nums, 0, size - 1);
  
  print(nums, size);
  return 0;
}