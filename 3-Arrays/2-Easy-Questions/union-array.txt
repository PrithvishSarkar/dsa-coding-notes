#include <bits/stdc++.h>

using namespace std;

void input(vector < int > & nums, int n) {
  for (int index = 0; index < n; index++) {
    int element;
    cin >> element;
    nums[index] = element;
  }
}

// Time Complexity is O(max(N, M)) and Space Complexity is O(max(N, M)).
vector < int > unionArray(vector < int > & nums1, int n, vector < int > & nums2, int m) {
  int i = 0, j = 0, k = -1;
  // i -> moving index for `nums1` vector
  // j -> moving index for `nums2` vector
  // k -> moving index for `temp` vector

  vector < int > temp;
  while (i < n && j < m) {
    if (nums1[i] < nums2[j]) {
      if (k != -1 && temp[k] == nums1[i]) i++;
      else {
        temp.push_back(nums1[i++]);
        k++;
      }
    }
    else if (nums1[i] > nums2[j]) {
      if (k != -1 && temp[k] == nums2[j]) j++;
      else {
        temp.push_back(nums2[j++]);
        k++;
      }
    }
    else {
      temp.push_back(nums1[i++]);
      j++;
      k++;
    }
  }

  while (i < n) {
    if (temp[k] == nums1[i]) i++;
    else {
      temp.push_back(nums1[i++]);
      k++;
    }
  }
  while (j < m) {
    if (temp[k] == nums2[j]) j++;
    else {
      temp.push_back(nums2[j++]);
      k++;
    }
  }
  return temp;
}

void print(vector < int > & nums, int size) {
  for (int index = 0; index < size; index++) cout << nums[index] << " ";
  cout << endl;
}

int main() {
  int n, m;
  cin >> n >> m;
  vector < int > nums1(n, 0), nums2(m, 0);
  input(nums1, n);
  input(nums2, m);
  vector < int > nums = unionArray(nums1, n, nums2, m);
  print(nums, nums.size());
  return 0;
}