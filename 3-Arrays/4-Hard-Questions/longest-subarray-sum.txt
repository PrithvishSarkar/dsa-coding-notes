#include <bits/stdc++.h>

using namespace std;

void input(vector < int > & nums, int n) {
  for (int index = 0; index < n; index++) {
    int element;
    cin >> element;
    nums[index] = element;
  }
}

// Time Complexity is O(N) and Space Complexity is O(1).
int longestSubArrayLength(vector < int > & nums, int n, int k) {
  int start = 0, end = 0, sum = nums[0], length = 0;
  while (end < n) {
    if (sum > k) {
      sum -= nums[start];
      start++;
      if (start > end) break;
    }
    else if (sum < k) {
      end++;
      if (end == n) break;
      else sum += nums[end];
    }
    else {
      length = max(length, end - start + 1);
      end++;
      if (end == n) break;
      else sum += nums[end];
    }
  }
  return length;
}

int main() {
  int size, sumValue;
  cin >> size >> sumValue;
  vector < int > nums(size, 0);
  input(nums, size);
  cout << longestSubArrayLength(nums, size, sumValue);
  return 0;
}